From 61c8a1306bb7bbc8919a237602e6dd158c80ff23 Mon Sep 17 00:00:00 2001
From: "Uwe L. Korn" <uwe.korn@quantco.com>
Date: Thu, 10 Oct 2024 19:59:31 +0200
Subject: [PATCH 27/27] Protobuf 5 compatability

---
 .../mlir/lite/python/jax_to_tfl_flatbuffer.cc |  2 +-
 .../mlir/tensorflow/utils/parse_text_proto.cc |  2 +-
 tensorflow/core/debug/debug_io_utils.cc       |  4 ++
 .../core/ir/importexport/parse_text_proto.cc  |  2 +-
 .../profiler/convert/hlo_to_tools_data.cc     |  4 ++
 .../convert/xplane_to_memory_profile.cc       |  4 ++
 .../profiler/convert/xplane_to_tools_data.cc  |  8 +++
 tensorflow/core/util/proto/proto_utils.cc     | 10 ++--
 tensorflow/core/util/proto/proto_utils.h      |  4 +-
 .../proto_text/gen_proto_text_functions.cc    |  4 +-
 tensorflow/workspace2.bzl                     |  4 ++
 ...Migrate-from-AddError-to-RecordError.patch | 33 ++++++++++++
 ...y-with-protobuf-v26-migrate-from-dep.patch | 52 +++++++++++++++++++
 .../platform/default/human_readable_json.cc   |  4 ++
 14 files changed, 125 insertions(+), 12 deletions(-)
 create mode 100644 third_party/0001-Migrate-from-AddError-to-RecordError.patch
 create mode 100644 third_party/0002-Fix-compatibility-with-protobuf-v26-migrate-from-dep.patch

diff --git a/tensorflow/compiler/mlir/lite/python/jax_to_tfl_flatbuffer.cc b/tensorflow/compiler/mlir/lite/python/jax_to_tfl_flatbuffer.cc
index eba1ebc4..dc9f7b81 100644
--- a/tensorflow/compiler/mlir/lite/python/jax_to_tfl_flatbuffer.cc
+++ b/tensorflow/compiler/mlir/lite/python/jax_to_tfl_flatbuffer.cc
@@ -57,7 +57,7 @@ namespace {
 // Error collector that simply ignores errors reported.
 class NoOpErrorCollector : public tsl::protobuf::io::ErrorCollector {
  public:
-  void AddError(int line, int column, const std::string& message) override {}
+  void RecordError(int line, int column, const absl::string_view message) override {}
 };
 
 bool LoadHloProto(const std::string& contents, xla::HloProto* hlo_proto) {
diff --git a/tensorflow/compiler/mlir/tensorflow/utils/parse_text_proto.cc b/tensorflow/compiler/mlir/tensorflow/utils/parse_text_proto.cc
index 906a058d..0c673310 100644
--- a/tensorflow/compiler/mlir/tensorflow/utils/parse_text_proto.cc
+++ b/tensorflow/compiler/mlir/tensorflow/utils/parse_text_proto.cc
@@ -30,7 +30,7 @@ namespace {
 // Error collector that simply ignores errors reported.
 class NoOpErrorCollector : public protobuf::io::ErrorCollector {
  public:
-  void AddError(int line, int column, const std::string& message) override {}
+  void RecordError(int line, int column, absl::string_view message) override {}
 };
 }  // namespace
 
diff --git a/tensorflow/core/debug/debug_io_utils.cc b/tensorflow/core/debug/debug_io_utils.cc
index 0e4e11d8..912970b7 100644
--- a/tensorflow/core/debug/debug_io_utils.cc
+++ b/tensorflow/core/debug/debug_io_utils.cc
@@ -94,7 +94,11 @@ Event PrepareChunkEventProto(const DebugNodeKey& debug_node_key,
   // Encode the data in JSON.
   string json_output;
   tensorflow::protobuf::util::JsonPrintOptions json_options;
+#if GOOGLE_PROTOBUF_VERSION < 5026000
   json_options.always_print_primitive_fields = true;
+#else
+  json_options.always_print_fields_with_no_presence = true;
+#endif
   auto status = tensorflow::protobuf::util::MessageToJsonString(
       metadata, &json_output, json_options);
   if (status.ok()) {
diff --git a/tensorflow/core/ir/importexport/parse_text_proto.cc b/tensorflow/core/ir/importexport/parse_text_proto.cc
index c631785c..3ab6e17c 100644
--- a/tensorflow/core/ir/importexport/parse_text_proto.cc
+++ b/tensorflow/core/ir/importexport/parse_text_proto.cc
@@ -35,7 +35,7 @@ namespace {
 // Error collector that simply ignores errors reported.
 class NoOpErrorCollector : public tensorflow::protobuf::io::ErrorCollector {
  public:
-  void AddError(int line, int column, const std::string& message) override {}
+  void RecordError(int line, int column, const absl::string_view message) override {}
 };
 }  // namespace
 
diff --git a/tensorflow/core/profiler/convert/hlo_to_tools_data.cc b/tensorflow/core/profiler/convert/hlo_to_tools_data.cc
index 7fbcd397..d17f3402 100644
--- a/tensorflow/core/profiler/convert/hlo_to_tools_data.cc
+++ b/tensorflow/core/profiler/convert/hlo_to_tools_data.cc
@@ -62,7 +62,11 @@ absl::StatusOr<std::string> ConvertHloProtoToMemoryViewer(
 
   std::string json_output;
   tensorflow::protobuf::util::JsonPrintOptions options;
+#if GOOGLE_PROTOBUF_VERSION < 5026000
   options.always_print_primitive_fields = true;
+#else
+  options.always_print_fields_with_no_presence = true;
+#endif
   auto encoded_status = tensorflow::protobuf::util::MessageToJsonString(
       result_or.value(), &json_output, options);
   if (!encoded_status.ok()) {
diff --git a/tensorflow/core/profiler/convert/xplane_to_memory_profile.cc b/tensorflow/core/profiler/convert/xplane_to_memory_profile.cc
index b289f54b..38e89170 100644
--- a/tensorflow/core/profiler/convert/xplane_to_memory_profile.cc
+++ b/tensorflow/core/profiler/convert/xplane_to_memory_profile.cc
@@ -529,7 +529,11 @@ void ProcessMemoryProfileProto(int64_t max_num_snapshots,
 template <typename Proto>
 Status ConvertProtoToJson(const Proto& proto_output, std::string* json_output) {
   protobuf::util::JsonPrintOptions json_options;
+#if GOOGLE_PROTOBUF_VERSION < 5026000
   json_options.always_print_primitive_fields = true;
+#else
+  json_options.always_print_fields_with_no_presence = true;
+#endif
   auto status = protobuf::util::MessageToJsonString(proto_output, json_output,
                                                     json_options);
   if (!status.ok()) {
diff --git a/tensorflow/core/profiler/convert/xplane_to_tools_data.cc b/tensorflow/core/profiler/convert/xplane_to_tools_data.cc
index dcc7cea4..a995db64 100644
--- a/tensorflow/core/profiler/convert/xplane_to_tools_data.cc
+++ b/tensorflow/core/profiler/convert/xplane_to_tools_data.cc
@@ -218,7 +218,11 @@ absl::StatusOr<std::string> ConvertMultiXSpacesToPodViewer(
 
   std::string json_output;
   protobuf::util::JsonPrintOptions opts;
+#if GOOGLE_PROTOBUF_VERSION < 5026000
   opts.always_print_primitive_fields = true;
+#else
+  opts.always_print_fields_with_no_presence = true;
+#endif
   auto encode_status = protobuf::util::MessageToJsonString(
       ConvertOpStatsToPodViewer(combined_op_stats), &json_output, opts);
   if (!encode_status.ok()) {
@@ -272,7 +276,11 @@ absl::StatusOr<std::string> ConvertMultiXSpacesToOpProfileViewer(
       profile);
   std::string json_output;
   protobuf::util::JsonPrintOptions opts;
+#if GOOGLE_PROTOBUF_VERSION < 5026000
   opts.always_print_primitive_fields = true;
+#else
+  opts.always_print_fields_with_no_presence = true;
+#endif
 
   auto encode_status =
       protobuf::util::MessageToJsonString(profile, &json_output, opts);
diff --git a/tensorflow/core/util/proto/proto_utils.cc b/tensorflow/core/util/proto/proto_utils.cc
index 282be94a..7cfed84d 100644
--- a/tensorflow/core/util/proto/proto_utils.cc
+++ b/tensorflow/core/util/proto/proto_utils.cc
@@ -101,17 +101,17 @@ StringErrorCollector::StringErrorCollector(string* error_text,
   }
 }
 
-void StringErrorCollector::AddError(int line, int column,
-                                    const string& message) {
+void StringErrorCollector::RecordError(int line, int column,
+                                    absl::string_view message) {
   if (error_text_ != nullptr) {
     absl::SubstituteAndAppend(error_text_, "$0($1): $2\n", line + index_offset_,
                               column + index_offset_, message);
   }
 }
 
-void StringErrorCollector::AddWarning(int line, int column,
-                                      const string& message) {
-  AddError(line, column, message);
+void StringErrorCollector::RecordWarning(int line, int column,
+                                      absl::string_view message) {
+  RecordError(line, column, message);
 }
 
 }  // namespace proto_utils
diff --git a/tensorflow/core/util/proto/proto_utils.h b/tensorflow/core/util/proto/proto_utils.h
index f0347a84..c8b2a4b9 100644
--- a/tensorflow/core/util/proto/proto_utils.h
+++ b/tensorflow/core/util/proto/proto_utils.h
@@ -53,10 +53,10 @@ class StringErrorCollector : public protobuf::io::ErrorCollector {
   StringErrorCollector& operator=(const StringErrorCollector&) = delete;
 
   // Implementation of protobuf::io::ErrorCollector::AddError.
-  void AddError(int line, int column, const string& message) override;
+  void RecordError(int line, int column, absl::string_view message) override;
 
   // Implementation of protobuf::io::ErrorCollector::AddWarning.
-  void AddWarning(int line, int column, const string& message) override;
+  void RecordWarning(int line, int column, absl::string_view message) override;
 
  private:
   string* const error_text_;
diff --git a/tensorflow/tools/proto_text/gen_proto_text_functions.cc b/tensorflow/tools/proto_text/gen_proto_text_functions.cc
index 406e6641..d97eae73 100644
--- a/tensorflow/tools/proto_text/gen_proto_text_functions.cc
+++ b/tensorflow/tools/proto_text/gen_proto_text_functions.cc
@@ -31,8 +31,8 @@ class CrashOnErrorCollector
  public:
   ~CrashOnErrorCollector() override {}
 
-  void AddError(const string& filename, int line, int column,
-                const string& message) override {
+  void RecordError(absl::string_view filename, int line, int column,
+                absl::string_view message) override {
     LOG(FATAL) << "Unexpected error at " << filename << "@" << line << ":"
                << column << " - " << message;
   }
diff --git a/tensorflow/workspace2.bzl b/tensorflow/workspace2.bzl
index 5320aa18..32f0a39c 100644
--- a/tensorflow/workspace2.bzl
+++ b/tensorflow/workspace2.bzl
@@ -878,6 +878,10 @@ def _tf_repositories():
         name = "riegeli",
         sha256 = "1d216d5c97fa60632143d209a1bb48c2a83788efdb876902e7bbc06396d5ee1f",
         strip_prefix = "riegeli-5d75119232cd4f6db8dfa69a1503289f050e9643",
+        patch_file = [
+                "//third_party:0001-Migrate-from-AddError-to-RecordError.patch",
+                "//third_party:0002-Fix-compatibility-with-protobuf-v26-migrate-from-dep.patch",
+        ],
         urls = tf_mirror_urls("https://github.com/google/riegeli/archive/5d75119232cd4f6db8dfa69a1503289f050e9643.zip"),
     )
 
diff --git a/third_party/0001-Migrate-from-AddError-to-RecordError.patch b/third_party/0001-Migrate-from-AddError-to-RecordError.patch
new file mode 100644
index 00000000..0ed75ee8
--- /dev/null
+++ b/third_party/0001-Migrate-from-AddError-to-RecordError.patch
@@ -0,0 +1,33 @@
+From e75b32516c67dbcb0cd1a698d6700c3d7bd85a35 Mon Sep 17 00:00:00 2001
+From: Compression Team <noreply@google.com>
+Date: Fri, 31 May 2024 18:20:47 +0200
+Subject: [PATCH 1/2] Migrate from AddError() to RecordError()
+
+In Protobuf v22 RecordError() has been introduced and AddError() deprecated.
+In Protobuf v26 AddError() has been removed.
+
+PiperOrigin-RevId: 639057502
+---
+ riegeli/records/record_reader.cc | 6 +++---
+ 1 file changed, 3 insertions(+), 3 deletions(-)
+
+diff --git a/riegeli/records/record_reader.cc b/riegeli/records/record_reader.cc
+index 499432ab..f4d90cea 100644
+--- a/riegeli/records/record_reader.cc
++++ b/riegeli/records/record_reader.cc
+@@ -62,9 +62,9 @@ namespace riegeli {
+ class RecordsMetadataDescriptors::ErrorCollector
+     : public google::protobuf::DescriptorPool::ErrorCollector {
+  public:
+-  void AddError(const std::string& filename, const std::string& element_name,
+-                const google::protobuf::Message* descriptor,
+-                ErrorLocation location, const std::string& message) override {
++  void RecordError(absl::string_view filename, absl::string_view element_name,
++                   const google::protobuf::Message* descriptor,
++                   ErrorLocation location, absl::string_view message) override {
+     descriptors_->Fail(absl::InvalidArgumentError(
+         absl::StrCat("Error in file ", filename, ", element ", element_name,
+                      ": ", message)));
+-- 
+2.34.1
+
diff --git a/third_party/0002-Fix-compatibility-with-protobuf-v26-migrate-from-dep.patch b/third_party/0002-Fix-compatibility-with-protobuf-v26-migrate-from-dep.patch
new file mode 100644
index 00000000..b5af8d2d
--- /dev/null
+++ b/third_party/0002-Fix-compatibility-with-protobuf-v26-migrate-from-dep.patch
@@ -0,0 +1,52 @@
+From 96dccef7210d7e182446b2db7424b16f44a66dd0 Mon Sep 17 00:00:00 2001
+From: Marcin Kowalczyk <qrczak@google.com>
+Date: Tue, 4 Jun 2024 16:50:59 +0200
+Subject: [PATCH 2/2] =?UTF-8?q?Fix=20compatibility=20with=20protobuf=20v26?=
+ =?UTF-8?q?+:=20migrate=20from=20deprecated=20`AddError()`=20to=20`RecordE?=
+ =?UTF-8?q?rror()`=20also=20in=20text=20parser=E2=80=99s=20`ErrorCollector?=
+ =?UTF-8?q?`.?=
+MIME-Version: 1.0
+Content-Type: text/plain; charset=UTF-8
+Content-Transfer-Encoding: 8bit
+
+PiperOrigin-RevId: 640152285
+---
+ riegeli/messages/text_parse.cc | 6 +++---
+ riegeli/messages/text_parse.h  | 4 ++--
+ 2 files changed, 5 insertions(+), 5 deletions(-)
+
+diff --git a/riegeli/messages/text_parse.cc b/riegeli/messages/text_parse.cc
+index 94a28180..5089c728 100644
+--- a/riegeli/messages/text_parse.cc
++++ b/riegeli/messages/text_parse.cc
+@@ -35,9 +35,9 @@ namespace riegeli {
+ 
+ namespace messages_internal {
+ 
+-void StringErrorCollector::AddError(int line,
+-                                    google::protobuf::io::ColumnNumber column,
+-                                    const std::string& message) {
++void StringErrorCollector::RecordError(
++    int line, google::protobuf::io::ColumnNumber column,
++    absl::string_view message) {
+   if (line >= 0) {
+     absl::StrAppend(&errors_, "\nAt ", line + 1, ":", column + 1, ": ",
+                     message);
+diff --git a/riegeli/messages/text_parse.h b/riegeli/messages/text_parse.h
+index e6bb4db2..ee234ec8 100644
+--- a/riegeli/messages/text_parse.h
++++ b/riegeli/messages/text_parse.h
+@@ -39,8 +39,8 @@ namespace messages_internal {
+ 
+ class StringErrorCollector : public google::protobuf::io::ErrorCollector {
+  public:
+-  void AddError(int line, google::protobuf::io::ColumnNumber column,
+-                const std::string& message) override;
++  void RecordError(int line, google::protobuf::io::ColumnNumber column,
++                   absl::string_view message) override;
+ 
+   absl::string_view errors() const { return errors_; }
+ 
+-- 
+2.34.1
+
diff --git a/third_party/xla/third_party/tsl/tsl/platform/default/human_readable_json.cc b/third_party/xla/third_party/tsl/tsl/platform/default/human_readable_json.cc
index 167cdd2b..dc1ebdd1 100644
--- a/third_party/xla/third_party/tsl/tsl/platform/default/human_readable_json.cc
+++ b/third_party/xla/third_party/tsl/tsl/platform/default/human_readable_json.cc
@@ -33,7 +33,11 @@ absl::StatusOr<std::string> ProtoToHumanReadableJson(
 
   protobuf::util::JsonPrintOptions json_options;
   json_options.preserve_proto_field_names = true;
+#if GOOGLE_PROTOBUF_VERSION < 5026000
   json_options.always_print_primitive_fields = true;
+#else
+  json_options.always_print_fields_with_no_presence = true;
+#endif
   auto status =
       protobuf::util::MessageToJsonString(proto, &result, json_options);
   if (!status.ok()) {
