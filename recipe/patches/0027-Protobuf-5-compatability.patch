From e283895ada7da065acdc494d1ae7a4f78f1b3191 Mon Sep 17 00:00:00 2001
From: "Uwe L. Korn" <uwe.korn@quantco.com>
Date: Thu, 10 Oct 2024 19:59:31 +0200
Subject: [PATCH 27/27] Protobuf 5 compatability

---
 .../compiler/mlir/lite/python/jax_to_tfl_flatbuffer.cc |  2 +-
 .../compiler/mlir/tensorflow/utils/parse_text_proto.cc |  2 +-
 tensorflow/core/debug/debug_io_utils.cc                |  4 ++++
 tensorflow/core/ir/importexport/parse_text_proto.cc    |  2 +-
 tensorflow/core/profiler/convert/hlo_to_tools_data.cc  |  4 ++++
 .../core/profiler/convert/xplane_to_memory_profile.cc  |  4 ++++
 .../core/profiler/convert/xplane_to_tools_data.cc      |  8 ++++++++
 tensorflow/core/util/proto/proto_utils.cc              | 10 +++++-----
 tensorflow/core/util/proto/proto_utils.h               |  4 ++--
 .../tools/proto_text/gen_proto_text_functions.cc       |  4 ++--
 .../tsl/tsl/platform/default/human_readable_json.cc    |  4 ++++
 11 files changed, 36 insertions(+), 12 deletions(-)

diff --git a/tensorflow/compiler/mlir/lite/python/jax_to_tfl_flatbuffer.cc b/tensorflow/compiler/mlir/lite/python/jax_to_tfl_flatbuffer.cc
index ed968b54..71e16db6 100644
--- a/tensorflow/compiler/mlir/lite/python/jax_to_tfl_flatbuffer.cc
+++ b/tensorflow/compiler/mlir/lite/python/jax_to_tfl_flatbuffer.cc
@@ -57,7 +57,7 @@ namespace {
 // Error collector that simply ignores errors reported.
 class NoOpErrorCollector : public protobuf::io::ErrorCollector {
  public:
-  void AddError(int line, int column, const std::string& message) override {}
+  void RecordError(int line, int column, const absl::string_view message) override {}
 };
 
 bool LoadHloProto(const std::string& contents, xla::HloProto* hlo_proto) {
diff --git a/tensorflow/compiler/mlir/tensorflow/utils/parse_text_proto.cc b/tensorflow/compiler/mlir/tensorflow/utils/parse_text_proto.cc
index 906a058d..0c673310 100644
--- a/tensorflow/compiler/mlir/tensorflow/utils/parse_text_proto.cc
+++ b/tensorflow/compiler/mlir/tensorflow/utils/parse_text_proto.cc
@@ -30,7 +30,7 @@ namespace {
 // Error collector that simply ignores errors reported.
 class NoOpErrorCollector : public protobuf::io::ErrorCollector {
  public:
-  void AddError(int line, int column, const std::string& message) override {}
+  void RecordError(int line, int column, absl::string_view message) override {}
 };
 }  // namespace
 
diff --git a/tensorflow/core/debug/debug_io_utils.cc b/tensorflow/core/debug/debug_io_utils.cc
index 0e4e11d8..912970b7 100644
--- a/tensorflow/core/debug/debug_io_utils.cc
+++ b/tensorflow/core/debug/debug_io_utils.cc
@@ -94,7 +94,11 @@ Event PrepareChunkEventProto(const DebugNodeKey& debug_node_key,
   // Encode the data in JSON.
   string json_output;
   tensorflow::protobuf::util::JsonPrintOptions json_options;
+#if GOOGLE_PROTOBUF_VERSION < 5026000
   json_options.always_print_primitive_fields = true;
+#else
+  json_options.always_print_fields_with_no_presence = true;
+#endif
   auto status = tensorflow::protobuf::util::MessageToJsonString(
       metadata, &json_output, json_options);
   if (status.ok()) {
diff --git a/tensorflow/core/ir/importexport/parse_text_proto.cc b/tensorflow/core/ir/importexport/parse_text_proto.cc
index c631785c..3ab6e17c 100644
--- a/tensorflow/core/ir/importexport/parse_text_proto.cc
+++ b/tensorflow/core/ir/importexport/parse_text_proto.cc
@@ -35,7 +35,7 @@ namespace {
 // Error collector that simply ignores errors reported.
 class NoOpErrorCollector : public tensorflow::protobuf::io::ErrorCollector {
  public:
-  void AddError(int line, int column, const std::string& message) override {}
+  void RecordError(int line, int column, const absl::string_view message) override {}
 };
 }  // namespace
 
diff --git a/tensorflow/core/profiler/convert/hlo_to_tools_data.cc b/tensorflow/core/profiler/convert/hlo_to_tools_data.cc
index 7fbcd397..d17f3402 100644
--- a/tensorflow/core/profiler/convert/hlo_to_tools_data.cc
+++ b/tensorflow/core/profiler/convert/hlo_to_tools_data.cc
@@ -62,7 +62,11 @@ absl::StatusOr<std::string> ConvertHloProtoToMemoryViewer(
 
   std::string json_output;
   tensorflow::protobuf::util::JsonPrintOptions options;
+#if GOOGLE_PROTOBUF_VERSION < 5026000
   options.always_print_primitive_fields = true;
+#else
+  options.always_print_fields_with_no_presence = true;
+#endif
   auto encoded_status = tensorflow::protobuf::util::MessageToJsonString(
       result_or.value(), &json_output, options);
   if (!encoded_status.ok()) {
diff --git a/tensorflow/core/profiler/convert/xplane_to_memory_profile.cc b/tensorflow/core/profiler/convert/xplane_to_memory_profile.cc
index b289f54b..38e89170 100644
--- a/tensorflow/core/profiler/convert/xplane_to_memory_profile.cc
+++ b/tensorflow/core/profiler/convert/xplane_to_memory_profile.cc
@@ -529,7 +529,11 @@ void ProcessMemoryProfileProto(int64_t max_num_snapshots,
 template <typename Proto>
 Status ConvertProtoToJson(const Proto& proto_output, std::string* json_output) {
   protobuf::util::JsonPrintOptions json_options;
+#if GOOGLE_PROTOBUF_VERSION < 5026000
   json_options.always_print_primitive_fields = true;
+#else
+  json_options.always_print_fields_with_no_presence = true;
+#endif
   auto status = protobuf::util::MessageToJsonString(proto_output, json_output,
                                                     json_options);
   if (!status.ok()) {
diff --git a/tensorflow/core/profiler/convert/xplane_to_tools_data.cc b/tensorflow/core/profiler/convert/xplane_to_tools_data.cc
index b623c6a9..624f2c04 100644
--- a/tensorflow/core/profiler/convert/xplane_to_tools_data.cc
+++ b/tensorflow/core/profiler/convert/xplane_to_tools_data.cc
@@ -218,7 +218,11 @@ absl::StatusOr<std::string> ConvertMultiXSpacesToPodViewer(
 
   std::string json_output;
   protobuf::util::JsonPrintOptions opts;
+#if GOOGLE_PROTOBUF_VERSION < 5026000
   opts.always_print_primitive_fields = true;
+#else
+  opts.always_print_fields_with_no_presence = true;
+#endif
   auto encode_status = protobuf::util::MessageToJsonString(
       ConvertOpStatsToPodViewer(combined_op_stats), &json_output, opts);
   if (!encode_status.ok()) {
@@ -272,7 +276,11 @@ absl::StatusOr<std::string> ConvertMultiXSpacesToOpProfileViewer(
       profile);
   std::string json_output;
   protobuf::util::JsonPrintOptions opts;
+#if GOOGLE_PROTOBUF_VERSION < 5026000
   opts.always_print_primitive_fields = true;
+#else
+  opts.always_print_fields_with_no_presence = true;
+#endif
 
   auto encode_status =
       protobuf::util::MessageToJsonString(profile, &json_output, opts);
diff --git a/tensorflow/core/util/proto/proto_utils.cc b/tensorflow/core/util/proto/proto_utils.cc
index 282be94a..7cfed84d 100644
--- a/tensorflow/core/util/proto/proto_utils.cc
+++ b/tensorflow/core/util/proto/proto_utils.cc
@@ -101,17 +101,17 @@ StringErrorCollector::StringErrorCollector(string* error_text,
   }
 }
 
-void StringErrorCollector::AddError(int line, int column,
-                                    const string& message) {
+void StringErrorCollector::RecordError(int line, int column,
+                                    absl::string_view message) {
   if (error_text_ != nullptr) {
     absl::SubstituteAndAppend(error_text_, "$0($1): $2\n", line + index_offset_,
                               column + index_offset_, message);
   }
 }
 
-void StringErrorCollector::AddWarning(int line, int column,
-                                      const string& message) {
-  AddError(line, column, message);
+void StringErrorCollector::RecordWarning(int line, int column,
+                                      absl::string_view message) {
+  RecordError(line, column, message);
 }
 
 }  // namespace proto_utils
diff --git a/tensorflow/core/util/proto/proto_utils.h b/tensorflow/core/util/proto/proto_utils.h
index f0347a84..c8b2a4b9 100644
--- a/tensorflow/core/util/proto/proto_utils.h
+++ b/tensorflow/core/util/proto/proto_utils.h
@@ -53,10 +53,10 @@ class StringErrorCollector : public protobuf::io::ErrorCollector {
   StringErrorCollector& operator=(const StringErrorCollector&) = delete;
 
   // Implementation of protobuf::io::ErrorCollector::AddError.
-  void AddError(int line, int column, const string& message) override;
+  void RecordError(int line, int column, absl::string_view message) override;
 
   // Implementation of protobuf::io::ErrorCollector::AddWarning.
-  void AddWarning(int line, int column, const string& message) override;
+  void RecordWarning(int line, int column, absl::string_view message) override;
 
  private:
   string* const error_text_;
diff --git a/tensorflow/tools/proto_text/gen_proto_text_functions.cc b/tensorflow/tools/proto_text/gen_proto_text_functions.cc
index 406e6641..d97eae73 100644
--- a/tensorflow/tools/proto_text/gen_proto_text_functions.cc
+++ b/tensorflow/tools/proto_text/gen_proto_text_functions.cc
@@ -31,8 +31,8 @@ class CrashOnErrorCollector
  public:
   ~CrashOnErrorCollector() override {}
 
-  void AddError(const string& filename, int line, int column,
-                const string& message) override {
+  void RecordError(absl::string_view filename, int line, int column,
+                absl::string_view message) override {
     LOG(FATAL) << "Unexpected error at " << filename << "@" << line << ":"
                << column << " - " << message;
   }
diff --git a/third_party/xla/third_party/tsl/tsl/platform/default/human_readable_json.cc b/third_party/xla/third_party/tsl/tsl/platform/default/human_readable_json.cc
index 4f70c155..ae746f33 100644
--- a/third_party/xla/third_party/tsl/tsl/platform/default/human_readable_json.cc
+++ b/third_party/xla/third_party/tsl/tsl/platform/default/human_readable_json.cc
@@ -33,7 +33,11 @@ absl::StatusOr<std::string> ProtoToHumanReadableJson(
 
   protobuf::util::JsonPrintOptions json_options;
   json_options.preserve_proto_field_names = true;
+#if GOOGLE_PROTOBUF_VERSION < 5026000
   json_options.always_print_primitive_fields = true;
+#else
+  json_options.always_print_fields_with_no_presence = true;
+#endif
   auto status =
       protobuf::util::MessageToJsonString(proto, &result, json_options);
   if (!status.ok()) {
