From 29f35516b90c60b749773b5a3aed32209f793a20 Mon Sep 17 00:00:00 2001
From: ngam <67342040+ngam@users.noreply.github.com>
Date: Tue, 21 Jun 2022 21:53:57 +0000
Subject: [PATCH 1/2] Revert "[XLA] Fail calls to LsbMask at compile time if we
 can prove that they are invalid"

This reverts commit daaed07d1056c522035f602e16196091eb371534.
---
 tensorflow/compiler/xla/util.h | 30 +-----------------------------
 1 file changed, 1 insertion(+), 29 deletions(-)

diff --git a/tensorflow/compiler/xla/util.h b/tensorflow/compiler/xla/util.h
index 09cc7d6063e..49d18f747c1 100644
--- a/tensorflow/compiler/xla/util.h
+++ b/tensorflow/compiler/xla/util.h
@@ -424,37 +424,10 @@ std::string HumanReadableNumTranscendentalOps(double trops, double nanoseconds);
 // severity, filename, and line number.
 void LogLines(int sev, absl::string_view text, const char* fname, int lineno);
 
-// Used on a function to trap bad calls: any call that matches the specified
-// condition will cause a compile-time error. This macro uses a clang-specific
-// "diagnose_if" attribute, as described at
-// https://clang.llvm.org/docs/AttributeReference.html#diagnose-if
-//
-// Example:
-//
-//   int compute_absolute_value(int c)
-//     XLA_DIAGNOSE_ERROR_IF(c >= 0, "'c' is already positive.");
-#if ABSL_HAVE_ATTRIBUTE(diagnose_if)
-#define XLA_DIAGNOSE_ERROR_IF(...) \
-  __attribute__((diagnose_if(__VA_ARGS__, "error")))
-#else
 #define XLA_DIAGNOSE_ERROR_IF(...)
-#endif
-
-constexpr bool IsRuntimeEvaluated() {
-#ifdef __cpp_lib_is_constant_evaluated
-  return !std::is_constant_evaluated();
-#elif ABSL_HAVE_BUILTIN(__builtin_is_constant_evaluated)
-  return !__builtin_is_constant_evaluated();
-#else
-  return false;
-#endif
-}
-
 // Returns a mask with "width" number of least significant bits set.
 template <typename T>
-constexpr inline T LsbMask(int width)
-    XLA_DIAGNOSE_ERROR_IF(width < 0 || width >= std::numeric_limits<T>::digits,
-                          "width must be between [0, sizeof(T)*8)") {
+constexpr inline T LsbMask(int width) {
   static_assert(std::is_unsigned<T>::value,
                 "T should be an unsigned integer type");
   if (IsRuntimeEvaluated()) {
-- 
2.36.1

