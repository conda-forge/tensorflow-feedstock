{% set version = "2.8.1" %}
{% set estimator_version = "2.8.0" %}

package:
  name: libtensorflow_framework
  version: {{ version }}

source:
  - url: https://github.com/tensorflow/tensorflow/archive/refs/tags/v{{ version }}.tar.gz
    sha256: 4b487a63d6f0c1ca46a2ac37ba4687eabdc3a260c222616fa414f6df73228cec
    patches:
      - patches/0001-loosen-requirements.patch
      # Slated for 2.9.0 release
      # https://github.com/tensorflow/tensorflow/commit/613bcf9f92750bebf88b5f119da8bce83acb4b47
      - patches/0002-Remove_dependency_on_implementation_ofRepeatedField_iterator.patch
      - patches/0003-Remove_dependency_on_implementation_ofRepeatedField_iterator.patch
      - patches/0002-Use-oneDNN-systemlib.patch
      - patches/0001-Define-libtensorflow_core_cpu.patch
      - patches/0001-Use-pre-built-LLVM.patch

build:
  number: 0
  skip: true  # [win]
  skip: true  # [python_impl == 'pypy']
  # Tensorflow still hasn't updated from C++14.
  # Newer versions of abseil_cpp require C++17
  # This may be a possibility in 2.9.0
  skip: true  # [abseil_cpp != '20210324.2']
  string: cuda{{ cuda_compiler_version | replace('.', '') }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  string: cpu_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
  # These are needed as build/configure dependencies but aren't used in the final product
  ignore_run_exports_from:
    - abseil-cpp
    - grpc-cpp
  run_exports:
    # tensorflow makes no ABI guarantees, need to pin to what we built with
    # Preferably we would use `exact=True` here but the hash doesn't work.
    - {{ pin_subpackage('libtensorflow_framework', max_pin="x.x.x") }}

requirements:
  build:
    - python *
    - numpy >=1.21
    - nsync                                  # [build_platform != target_platform]
    - snappy                                 # [build_platform != target_platform]
    - giflib                                 # [build_platform != target_platform]
    - jpeg                                   # [build_platform != target_platform]
    - icu                                    # [build_platform != target_platform]
    - libpng                                 # [build_platform != target_platform]
    - flatbuffers <2.0.6                     # [build_platform != target_platform]
    - onednn                                 # [build_platform != target_platform]
    - onednn-cpu-threadpool                  # [build_platform != target_platform]
    - pybind11                               # [build_platform != target_platform]
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
    - bazel 4.2.2
    - bazel-toolchain >=0.1.3
    - grpc-cpp
    - libprotobuf
    - nasm
    - sed
    - rsync
    # realpath is not available from the docker image for cuda <= 10.2
    # so we install coreutils here
    - coreutils  # [cuda_compiler_version != "None"]
  host:
    # GPU requirements for CUDA
    - cudnn      # [cuda_compiler_version != "None"]
    - nccl       # [cuda_compiler_version != "None"]
    # conda build requirements
    - zlib
    - libpng
    - libcurl
    - curl         # [win]
    - unzip        # [not win]
    - zip          # [not win]
    - m2-unzip     # [win]
    - m2-zip       # [win]
    - openjdk >=8
    - nsync
    # TF_SYSTEM_LIBS, see usage in
    # https://github.com/tensorflow/tensorflow/blob/v{{ version }}/third_party/systemlibs/syslibs_configure.bzl
    # their versions are specified in
    # https://github.com/tensorflow/tensorflow/blob/v{{ version }}/tensorflow/workspace2.bzl
    # but so far there have been no problems with leaving these
    # unpinned; though some restrictions come in for packages
    # that are also listed as a requirement for the pip_package.
    - llvm-for-tensorflow {{ tf_llvm_version }}
    - abseil-cpp
    - astor
    - cython
    - dill
    - giflib
    - grpc-cpp
    # 2022/04/25 hmaarrfk
    # the latest flatbuffers 2.0.6 seems to have removed a sybmol in a patch release...
    # https://github.com/Qengineering/TensorFlow_Lite_Pose_RPi_64-bits/issues/3#issuecomment-1034799822
    - flatbuffers <2.0.6
    - icu
    - jpeg
    - libpng
    - libprotobuf
    - onednn
    - onednn-cpu-threadpool  # [not (osx and arm64)]
    - openssl
    - pybind11
    - sqlite
    - snappy
    - zlib
  run:
    # avoid that people without GPUs needlessly download ~200-300MB
    - __cuda  # [cuda_compiler_version != "None"]
    - onednn-cpu-threadpool  # [not (osx and arm64)]

test:
  commands:
    - test -f "${PREFIX}/lib/libtensorflow_framework${SHLIB_EXT}"
    - test -f "${PREFIX}/lib/libtensorflow_core_cpu${SHLIB_EXT}"

about:
  home: http://tensorflow.org/
  license: Apache-2.0
  license_file: LICENSE
  license_family: Apache
  summary: TensorFlow is an end-to-end open source platform for machine learning.
  description: |
    TensorFlow offers multiple levels of abstraction so you can choose the
    right one for your needs. Build and train models by using the high-level
    Keras API, which makes getting started with TensorFlow and machine learning
    easy.
  dev_url: https://github.com/tensorflow/tensorflow
  doc_url: https://www.tensorflow.org/get_started/get_started
  doc_source_url: https://github.com/tensorflow/tensorflow/tree/master/tensorflow/docs_src

extra:
  recipe-maintainers:
    - conda-forge/tensorflow
